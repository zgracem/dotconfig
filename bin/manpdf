#!/usr/bin/env fish

# See also ../libexec/manpdf_add_metadata.sed
# and ../libexec/manpdf_cleanup_bookmarks.sed

set -gx this manpdf

# MANPDF_DIR is the path to the directory where we will save generated PDFs.
# It will be created if it doesn't exist.
if path is -d "$MANPDF_DIR"
    true
else if path is -d "$XDG_DATA_HOME"
    set -gx MANPDF_DIR $XDG_DATA_HOME/doc/manpdf
else
    set -gx MANPDF_DIR $HOME/.manpath
end
mkdir -p $MANPDF_DIR; or exit

function man_page_title
    set -l man_file (command man -w $argv)
    or return

    path basename $man_file | string replace -rf '\.([^.]+)(?:\.gz)?$' '.$1'
end

function process_man_file -a man_path processed_man_path
    # `gunzip -c` sends the decompressed file to standard output, leaving the
    # original file intact; when `-c` is combined with `-f`, gunzip will pass
    # non-gzipped files through unchanged instead of throwing an error.
    gunzip -c -f $man_path \
    | sed -E -f $XDG_CONFIG_HOME/libexec/manpdf_add_metadata.sed \
    | sed -E -f $XDG_CONFIG_HOME/libexec/manpdf_cleanup_bookmarks.sed \
    | sed -E -e 's#^\.so ([^/].*)$#.so '(path dirname $man_path)'/../\1#p;' \
    | sed -E -e 's#\\\?\[u201[cd]\]#"#g;' \
    > $processed_man_path
end

function man_to_ps -a man_file ps_file
    # groff options:
    #   -t          = Preprocess with tbl(1) -- needed for terminfo(5) et al.
    #   -Tps        = Selects the PostScript output device
    #   -m mandoc   = Loads the macro that handles man pages
    #   -m pdfmark  = Loads the macro that will process the metadata and
    #                 bookmarks we added earlier
    #   -c          = Disables colour output, because getting ANSI colours
    #                 into a PostScript file is considerably outside the scope
    #                 of this already-ambitious script
    #   -Wbreak     = New in groff 1.23: silences warnings about too-wide tables
    groff -t -Tps -m mandoc -m pdfmark -c -Wbreak $man_file > $ps_file
    or exit

    # It's possible for groff to return 0 while failing to produce any output,
    # so make whether $ps_file is empty the criteria for claiming success.
    test -s $ps_file
end

function ps_to_pdf -a ps_file pdf_file
    # GhostScript options:
    #   -q        = Suppresses startup messages
    #   -dBATCH   = Suppresses other output too ("batch file mode")
    #   -dNOPAUSE = Disables the prompt and pause after each page
    gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile=$pdf_file $ps_file
end

function main
    argparse -n$this f/force o/open -- $argv
    or return

    if not command -sq gs
        echo >&2 "missing requirement: GhostScript"
        exit 1
    end

    set -fx man_path (command man -w $argv)
    or exit

    set -f man_title (man_page_title $man_path)
    set -f pdf_file $MANPDF_DIR/$man_title.pdf

    if path is -v -f $pdf_file; or set -q _flag_force
        if set -fx temp_dir (mktemp -d -t $this.XXXXXX)
            # unformatted man page with pdfmark inserts
            set -fx man_file $temp_dir/$man_title

            # PostScript file with extra PDF instructions
            set -f ps_file $temp_dir/$man_title.ps
        else
            echo >&2 "cannot continue without temporary directory"
            exit 1
        end

        if not process_man_file $man_path $man_file
            echo >&2 "failed to add macros to $man_file"
            exit 1
        end

        if not man_to_ps $man_file $ps_file
            echo >&2 "failed to generate PostScript file for $title"
            exit 1
        end

        if not ps_to_pdf $ps_file $pdf_file
            echo >&2 "failed to generate PDF from $ps_file"
            exit 1
        end
    end

    set -q _flag_open; and command open $pdf_file
    echo $pdf_file
end

main $argv
