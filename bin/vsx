#!/usr/bin/env fish

set -gx this vsx

if not command --search --quiet code
    echo >&2 "error: VS Code not found"
    exit 1
end

if not command --search --quiet jq
    echo >&2 "error: jq not found"
    exit 1
end

set extensions_file ~/.config/Code/User/extensions.json

function read_extensions_file
    set -q desired_extensions[1];
    or set -gx desired_extensions (jq --raw-output '.recommendations[]' $extensions_file)
    printf "%s\n" $desired_extensions
end

function do_install -d "Install all missing extensions in list"
    for extension in (read_extensions_file)
        if not contains $extension (do_list)
            code --install-extension $extension
        end
    end
end

function do_cleanup -d "Remove all unlisted extensions"
    for extension in (do_list)
        if not contains $extension (read_extensions_file)
            code --uninstall-extension $extension
        end
    end
end

function do_list -d "List installed extensions"
    set -q installed_extensions[1];
    or set -gx installed_extensions (code --list-extensions 2>/dev/null)
    printf "%s\n" $installed_extensions
end

function do_diff -d "Diff listed & installed extensions"
    diff -y --suppress-common-lines (read_extensions_file | psub) (do_list | psub)
end

function do_json -d "List installed extensions as JSON"
    set --local jq_script '.recommendations=($exts|rtrimstr("\n")|split("\n"))'
    jq --null-input --monochrome-output --rawfile exts (do_list | psub) $jq_script
end

function do_dump -d "Update the extensions file"
    do_json | tee $extensions_file
end

function do_sync -d "Install, then cleanup"
    do_install
    do_cleanup
end

function do_completions -d "Print fish completions"
    echo complete --command $this --exclusive
    for cmd in (get_commands)
        echo complete -c $this -n __fish_use_subcommand -a $cmd -d '"'(get_desc do_$cmd)'"'
    end
end

function get_commands
    set --local pattern '(?<=function do_)[a-z]+'
    rg --pcre2 --no-filename --no-line-number --only-matching $pattern (status filename)
end

function get_desc
    functions -Dv $argv[1] | string join0 | string split0 -f5
end

function get_help
    argparse --name $this v/verbose -- $argv
    or return

    if set -q argv[1]
        echo "$this $argv[1]:" (get_desc do_$argv[1])
        return
    end

    set --local commands (get_commands)
    echo -s "Usage: $this [" (string join "|" $commands) "]"

    if set -q _flag_verbose
        for cmd in $commands
            echo "$cmd:" (get_desc do_$cmd)
        end
    end
end

function main
    switch "$argv[1]"
        case (get_commands)
            eval do_$argv[1]
        case help ""
            get_help $argv[2]
        case "*"
            echo >&2 "error: don't know how to $argv[1]"
            get_help >&2
            exit 1
    end
end

main $argv
