#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "time"

class DateTimeRelativizer
  # @return [Time]
  attr_reader :ref_from
  # @return [Time]
  attr_reader :ref_to

  def initialize(ref_from, ref_to)
    @ref_from = Time.parse(ref_from)
    @ref_to = Time.parse(ref_to)
  end

  # @return [Time]
  def past = ref_from - (ref_to - ref_from)

  # @return [Time]
  def middle = ref_from + ((ref_to - ref_from) / 2)

  # @return [Time]
  def future = ref_to + (ref_to - ref_from)

  # @param rel_to [String] will be parsed by `Time.parse`
  # @return [Time]
  def relative_from(rel_to) = ref_to + (Time.parse(rel_to) - ref_from)

  # @param rel_from [String] will be parsed by `Time.parse`
  # @return [Time]
  def relative_to(rel_from) = ref_from + (Time.parse(rel_from) - ref_to)
end

opts = {}
parser = OptionParser.new do |parser|
  parser.banner = "Usage: reldate [flags] DATE1 DATE2\n\n"

  parser.separator "Relative to two dates:"

  parser.on("-p", "--past", "Find the date as far in DATE1's past as DATE1 is from DATE2")
  parser.on("-m", "--middle", "Find the date precisely between DATE1 and DATE2")
  parser.on("-f", "--future", "Find the date as far in DATE2's future as DATE2 is from DATE1")

  parser.separator "Relative to three dates:"

  parser.on("-c", "--from DATE3", "Find the date as far in DATE3's future as DATE2 is from DATE1")
  parser.on("-d", "--to DATE3", "Find the date as far in DATE3's past as DATE1 is from DATE2")
end
parser.parse!(ARGV, into: opts)

msg = []
case opts.keys.first
when *%i[past middle future]
  msg << opts.keys.first
when *%i[from to]
  msg << "relative_#{opts.keys.first}".to_sym
  msg << opts.values.first
end
puts DateTimeRelativizer.new(*ARGV).send(*msg).strftime("%F")
