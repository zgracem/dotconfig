" ----------------------------------------------------------------------------
" ~/.vimrc : 2024 edition
" export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
" ----------------------------------------------------------------------------
" files & directories
" ----------------------------------------------------------------------------

" ~/.vim et al.
" → https://vimdoc.sourceforge.net/htmldoc/options.html#'runtimepath'
" Each can have subfolders like colors/, ftplugin/, plugin/, syntax/, etc.
set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
" $HOME/.vim
"     Personal stuff: ~/.vim/{colors,ftplugin,plugin}
" $VIM/vimfiles
"     Files installed by third-party packages (e.g. cmake)
" $VIMRUNTIME
"     Default files for the current version of vim

" ~/.viminfo 
" → https://vimdoc.sourceforge.net/htmldoc/options.html#'viminfo'
set viminfo='1000,f0,<500,h,n$XDG_DATA_HOME/vim/.viminfo
"   ' = how many files to save info for
"   f = store global marks (1 for yes, 0 for no)
"   < = how many lines are saved for each register
"   h = disable 'hlsearch' highlight on start
"   n = use this name for the file

" location for third-party plugins
set packpath+=$XDG_DATA_HOME/vim

" disable clutter
set nobackup
set noswapfile
set noundofile

" ----------------------------------------------------------------------------
" Options
" ----------------------------------------------------------------------------

set nocompatible        " use vim settings, rather than vi settings

let mapleader=","       " use `,` as leader
set history=1024        " keep lots of history
set undolevels=1024     " keep lots of undo
set encoding=utf-8      " Unicode files
set termencoding=utf-8  " Unicode terminal

set autoread            " reload files changed outside vim
set confirm             " ask about unsaved changes instead of aborting
set hidden              " don't unload abandoned buffers
set noerrorbells        " shut up
set visualbell t_vb=    " really, shut up
set shortmess+=I        " don't display startup message either
set splitright          " open new vertical panes to the right

" editing
set backspace=indent,eol,start " backspace over everything in insert mode
set fileformats=unix    " LF line endings
set fixendofline        " make sure last line in file has <EOL>

" indents and spacing
set wrap                " visually wrap long lines
set textwidth=79        " force EoL after < x chars
set autoindent          " carry indent to new line
set breakindent         " wrapped line repeats indent
set linebreak           " visually break at word boundaries

" tabs
set expandtab           " use spaces, not tabs
set shiftwidth=0        " size of each (autoindent) step; 0 = use 'tabstop'
set tabstop=4           " one <Tab> is equivalent to 4 spaces
set shiftround          " always indent to a multiple of 'shiftwidth'
set smarttab            " backspace over blanks at BoL
set softtabstop=-1      " <0 = use 'shiftwidth' instead

" mousing
if has("mouse")
  set mouse=a           " enable mouse in all modes
  set ttymouse=xterm2   " xterm-style mouse + enable dragging
endif

" searching
set gdefault            " apply substitutions globally on lines
set hlsearch            " highlight last pattern
set ignorecase          " case-insensitive...
set smartcase           " ...unless the pattern is mixed-case
set incsearch           " incremental search
set wrapscan            " searches wrap around the end of the file
set shortmess+=s        " don't notify when search wraps
silent! set cpoptions+=;" skip current char when ;-repeating a t-search

" use normal regexes when searching
nnoremap / /\v
vnoremap / /\v

" ----------------------------------------------------------------------------
" Appearance
" ----------------------------------------------------------------------------

silent! colorscheme zgm-colours " TODO: FIX THIS

set cmdheight=2         " fewer 'Press ENTER to continue' messages
set cursorline          " highlight current line
set lazyredraw          " don't redraw screen while executing macros
set number              " display line numbers...
set relativenumber      " ...relative to current line
set scrolloff=3         " keep x lines of context at edge of screen
set showcmd             " display partial commands
set ttyfast             " faster redraw
set winminheight=0      " windows can be 0 lines high

" for 'list' mode and the ':list' command
set listchars=eol:¶,tab:→\ ,trail:·,extends:»,precedes:«,nbsp:¬
let &showbreak = '» '

" cursor shape
if $TERM_PROGRAM == "iTerm.app"
  if expand($TMUX) != ""
    let &t_SI = "\e[3 q"
    let &t_EI = "\e[0 q"
  else
    let &t_SI = "\e]1337;CursorShape=1\x07"
    let &t_EI = "\e]1337;CursorShape=0\x07"
  endif
endif

if has("statusline")
  " window title
  set title
  set titlestring+=%(%h\ %)     " help flag
  set titlestring+=%F           " full path to file
  set titlestring+=%(\ [%M%R]%) " modified/readonly flags

  if $TERM_PROGRAM == "iTerm.app"
    let &t_ts = "\e]7;"
    let &t_fs = "\x07"
  elseif expand($TMUX) != ""
    let &t_ts = "\ePtmux;\e\e]0;"
    let &t_fs = "\x07\e\\"
  elseif &term =~ "screen"
    let &t_ts = "\eP\e]0;"
    let &t_fs = "\x07\e\\"
  endif

  " status line
  set laststatus=2            " always show statusline (overrides ruler)

  set statusline=%F\          " full path to file
  set statusline+=%([%M%R]%)  " modified & readonly flags

  set statusline+=%=          " start of right side

  " display a warning if file encoding isn't utf-8
  set statusline+=%#StatusLineErr#
  set statusline+=%(%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}%*\ %)
  set statusline+=%*

  " display a warning if fileformat != unix
  set statusline+=%#StatusLineErr#
  set statusline+=%(%{&ff!='unix'?'['.&ff.']':''}%*\ %)
  set statusline+=%*

  " filetype
  set statusline+=%y

  " cursor position + percentage through file
  set statusline+=\ %l,%c%V
  set statusline+=\ %5.(%3.p%%\ %)
endif

" ----------------------------------------------------------------------------
" autocmds
" ----------------------------------------------------------------------------

" clear all autocmds in "vimrc" group <http://ruderich.org/simon/config/vimrc>
if has("autocmd")
  augroup vimrc
    autocmd!
  augroup END
endif

if exists("#vimrc")
  augroup vimrc
    " default to plain text, LF endings
    autocmd BufNewFile * if &ff == "dos" | setlocal ff=unix | endif
    autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif

    " treat *.md as Markdown, not Modula-2
    autocmd BufNewFile,BufReadPost *.md 
      \ setlocal ft=markdown
  augroup END
endif
