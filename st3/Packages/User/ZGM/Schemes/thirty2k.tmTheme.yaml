# http://tmtheme-editor.herokuapp.com/
# http://www.sublimetext.com/docs/3/scope_naming.html
# https://learnxinyminutes.com/docs/yaml/
---
name: thirty2k
author: Z.G.M.
colorSpaceName: sRGB

colours:
  black:      &black      "#383838"
  red:        &red        "#992f2f"
  green:      &green      "#489967"
  yellow:     &yellow     "#997a0b"
  blue:       &blue       "#4677b3"
  magenta:    &magenta    "#a64279"
  cyan:       &cyan       "#299999"
  white:      &white      "#9fb3b3"
  brblack:    &brblack    "#4a4f50"
  brred:      &brred      "#d92b2b"
  brgreen:    &brgreen    "#16d96d"
  bryellow:   &bryellow   "#d9ba0b"
  brblue:     &brblue     "#1895ff"
  brmagenta:  &brmagenta  "#de3785"
  brcyan:     &brcyan     "#15dbe6"
  brwhite:    &brwhite    "#dce6e6"
  bg:         &bg         "#282828"
  fg:         &fg         "#7c8a8b"

styles:
  plain: &plain
    fontStyle: ""
    foreground: *fg
  constant: &constant
    foreground: *bryellow
  class: &class
    <<: *constant
  keyword: &keyword
    foreground: *yellow
    fontStyle: italic
  punctuation: &punctuation
    foreground: *brblack
  string: &string
    foreground: *cyan
  variable: &variable
    foreground: *blue
  esc: &esc
    foreground: *red
  reserved: &reserved
    foreground: *brred
    fontStyle: italic
  special: &special
    <<: *reserved
  meta: &meta
    foreground: *brblack
  commment: &comment
    fontStyle: italic
    foreground: *brblack
  hardware: &sh_hardware
    foreground: *green

settings:
- settings:
    # General
    <<:                 *plain
    background:         *bg
    invisibles:         *brblack
    caret:              *white
    lineHighlight:      *black

    # Brackets
    bracketsOptions:            foreground underline
    bracketsForeground:         *white
    bracketContentsOptions:     underline
    bracketContentsForeground:  *brblack

    # Tags
    tagsOptions:                stippled_underline
    tagsForeground:             *brblack

    # # Find
    # findHighlight:              *black
    # findHighlightForeground:    *brwhite

    # Gutter
    gutter:             *bg

    # Selection
    selection:          *black
    selectionBorder:    *bg
    inactiveSelection:  *black

    # Guides
    guide:              *black # normal/inactive or child of active
    activeGuide:        *brblack # current active level
    stackGuide:         *black # parent(s) of active

# -----------------------------------------------------------------------------
# Generic types
# -----------------------------------------------------------------------------

# Comments

- name: "Comment"
  scope: comment
  settings: *comment

- name: "Comment: punctuation"
  scope: punctuation.definition.comment
  settings: *comment

# Strings

- name: "String"
  scope: string,
    string.quoted.single,
    string.quoted.double,
    string.quoted.triple
  settings: *string

- name: "String: unquoted"
  scope: string.unquoted
  settings: *string

- name: "String: unconventional"
  scope: string.quoted.other
  settings: *string

# Regex literals
- name: "String: regex"
  scope: string.regexp
  settings: *string

# Punctuation at the beginning & end of string literals
- name: "String: punctuation"
  scope: punctuation.definition.string.begin, 
    punctuation.definition.string.end
  settings: *plain

# Character escapes in strings, e.g. \n and \x20
- name: "Escape character"
  scope: constant.character.escape
  settings: *esc

# Formatting placeholders, such as those used for sprintf(), e.g. %s
- name: "Formatting placeholder"
  scope: constant.other.placeholder
  settings: *reserved

# Constants

- name: "Constant"
  scope: constant
  settings: *constant

# Constants that are built into the language, such as booleans and null values
- name: "Constant: built-in"
  scope: constant.language
  settings: *constant

# Unrecognized constant provided by a library or framework
- name: "Constant: library"
  scope: support.constant
  settings: *constant

# Class names
- name: "Class"
  scope: entity.name.class
  settings: *class

# Inherited class or implemented interface/trait names
- name: "Class: inherited"
  scope: entity.other.inherited-class
  settings: *class

# Unrecognized class provided by a library or framework
- name: "Class: library"
  scope: support.type, support.class
  settings: *class

- name: "Class: library module"
  scope: support.module
  settings: *class

# The names of data structures
- name: "Entity"
  scope: entity.name
  settings:
    foreground: *blue

# Namespaces, packages and modules
- name: "Namespace"
  scope: entity.name.namespace
  settings: *class

# Numeric literals, including integers, floats, etc.
- name: "Numeric"
  scope: constant.numeric
  settings:
    foreground: *magenta

# Keywords

- name: "Keyword"
  scope: keyword
  settings: *keyword

# Control keywords (conditionals + import)
- name: "Keyword: control"
  scope: keyword.control
  settings: *keyword

# E.g. if, try, end, while.
- name: "Keyword: conditionals"
  scope: keyword.control.conditional
  settings: *keyword

# "often used in appropriate situations"
- name: "Keyword: import"
  scope: keyword.control.import
  settings: *reserved

# Punctuation w/in keywords, such as the @ symbol in CSS
- name: "Keyword: punctuation"
  scope: punctuation.definition.keyword
  settings: *keyword

# All remaining non-operator keywords
- name: "Keyword: other"
  scope: keyword.other
  settings: *reserved

# Types and definition/declaration keywords
# E.g. int, bool, char, func, function, class, def
- name: "Keyword: storage type"
  scope: storage.type
  settings:
    fontStyle: italic
    foreground: *blue

# Keywords that affect the storage of a variable, function or data structure
# E.g. static, inline, const, public, private
- name: "Keyword: storage modifier"
  scope: storage.modifier
  settings: *reserved

# =
- name: "Operator: assignment"
  scope: keyword.operator.assignment
  settings:
    foreground: *white
    fontStyle: ""

# E.g. +, |, &&
- name: "Operator: symbol"
  scope: keyword.operator,
    keyword.operator.arithmetic,
    keyword.operator.bitwise,
    keyword.operator.logical
  settings:
    foreground: *white
    fontStyle: ""

# E.g. and, or, not
- name: "Operator: word"
  scope: keyword.operator.word
  settings: *keyword

# Functions

# (When invoked, they should use variable.function)
- name: "Function: definition"
  scope: entity.name.function
  settings:
    foreground: *brblue

# (When defined, they should use entity.name.function)
- name: "Function: invocation"
  scope: variable.function
  settings: *plain

# Unrecognized function provided by a library or framework
- name: "Function: library"
  scope: support.function
  settings: *keyword

# Variables

- name: "Variable"
  scope: variable,
    variable.other
  settings: *variable

# Symbols that are part of the variable name, like $ in PHP
- name: "Variable: punctuation"
  scope: punctuation.definition.variable,
    punctuation.separator.variable
  settings: *sh_hardware

# Variant for contrast w/ variable.other.constant
- name: "Variable: read/write"
  scope: variable.other.readwrite
  settings: *variable

# Immutable variables, often via a const modifier
- name: "Variable: immutable"
  scope: variable.other.constant
  settings: *constant

# Reserved names specified by the language, like this, self, super, etc.
- name: "Variable: reserved"
  scope: variable.language
  settings: *special

# Parameters to a function or method
- name: "Variable: parameter"
  scope: variable.parameter
  settings: *plain

# -----------------------------------------------------------------------------
# Punctuation
# -----------------------------------------------------------------------------

# Separators like commas and colons
- name: "Punctuation: separator"
  scope: punctuation.separator
  settings: *punctuation

# Terminators like semicolons
- name: "Punctuation: terminator"
  scope: punctuation.terminator
  settings: *punctuation

# Line-continuation characters
- name: "Punctuation: line continuation"
  scope: punctuation.separator.continuation
  settings: *esc

# Member access, scope resolution, or similar constructs 
# Like .. in Python, -> in PHP, :: in C++
- name: "Punctuation: accessor"
  scope: punctuation.accessor
  settings: *punctuation

# Sectioning punctuation
- name: "Punctuation: sectioning"
  scope: punctuation.section
  settings: *punctuation

# -----------------------------------------------------------------------------
# Invalid
# -----------------------------------------------------------------------------

# Elements that are illegal in a specific context
- name: "Invalid"
  scope: invalid
  settings:
    background: "#731513" # red w/ luminescence * 0.5

# -----------------------------------------------------------------------------
# Markup
# -----------------------------------------------------------------------------

# Section headings
- name: "Markup: headings"
  scope: entity.name.section, markup.heading
  settings:
    foreground: *blue

# Section headings
- name: "Markup: headings punctuation"
  scope: punctuation.definition.heading
  settings:
    foreground: *white

# Lists
- name: "Markup: lists"
  scope: markup.list.unnumbered, markup.list.numbered
  settings: *plain

# Basic text styling
- name: "Markup: bold"
  scope: markup.bold
  settings:
    fontStyle: bold

- name: "Markup: italic"
  scope: markup.italic
  settings:
    fontStyle: italic

- name: "Markup: underline"
  scope: markup.underline
  settings:
    fontStyle: underline

# Links
- name: "Markup: link"
  scope: markup.underline.link
  settings:
    fontStyle: underline
    foreground: *blue

# Blockquotes and other quote styles
- name: "Markup: quote"
  scope: markup.quote
  settings:
    foreground: *brblack

# Punctuation for blockquotes
- name: "Markup: quote"
  scope: punctuation.definition.blockquote
  settings:
    foreground: *white

# Inline and block literal quoting
- name: "Markup: literal quoting"
  scope: markup.raw.inline, markup.raw.block
  settings:
    foreground: *brblack

# Quotation marks for literals
- name: "Markup: literal punctuation"
  scope: punctuation.definition.raw
  settings:
    foreground: *white

# Other markup, including constructs such as footnotes and tables
- name: "Markup: other"
  scope: markup.other
  settings:
    foreground: *brblack

# HTML and XML tags
- name: "Markup: tag name"
  scope: entity.name.tag
  settings:
    foreground: *blue

# HTML and XML tags
- name: "Markup: tag attribute name"
  scope: entity.other.attribute-name
  settings:
    foreground: *yellow

# <>
- name: "Markup: tag punctuation"
  scope: punctuation.definition.tag.html, 
    punctuation.definition.tag.begin, 
    punctuation.definition.tag.end
  settings: *meta

# -----------------------------------------------------------------------------
# diff
# -----------------------------------------------------------------------------

# Inserted and deleted content, such as with diff output
- name: "[diff] inserted"
  scope: markup.inserted
  settings:
    foreground: *green

- name: "[diff] deleted"
  scope: markup.deleted
  settings:
    foreground: *red

- name: "[diff] changed"
  scope: markup.changed
  settings:
    foreground: *cyan

# -----------------------------------------------------------------------------
# Markdown
# -----------------------------------------------------------------------------

# Markdown line breaks
- name: "[Markdown] Line break"
  scope: meta.paragraph.markdown meta.dummy.line-break
  settings:
    background: *brmagenta

# -----------------------------------------------------------------------------
# Ruby
# -----------------------------------------------------------------------------

- name: "[Ruby] Method: invocation"
  scope: meta.function-call.method entity.name.function.ruby
  settings: *plain

- name: "[Ruby] Method: punctuation"
  scope: punctuation.section.function.ruby,
    punctuation.definition.parameters.ruby
  settings: *punctuation

- name: "[Ruby] Module"
  scope: entity.name.module.ruby
  settings: *class

# - name: "[Ruby] Numeric"
#   scope: constant.numeric.ruby
#   settings:
#     foreground: *cyan

- name: "[Ruby] Punctuation: interpolation"
  scope: source.ruby.embedded.source punctuation.section.embedded.ruby
  settings: 
    foreground: *red

- name: "[Ruby] String: punctuation"
  scope: punctuation.definition.string.ruby,
    punctuation.definition.string.begin.ruby,
    punctuation.definition.string.end.ruby
  settings: 
    foreground: *white

- name: "[Ruby] String: symbol"
  scope: constant.other.symbol.ruby
  settings: *string

- name: "[Ruby] Punctuation: symbol"
  scope: punctuation.definition.constant.ruby
  settings: *string

- name: "[Ruby] String: program block"
  scope: string.unquoted.program-block.ruby
  settings: *special

- name: "[Ruby] Variable: parameter"
  scope: variable.parameter.ruby
  settings: *variable

- name: "[Ruby] Variable: global"
  scope: variable.other.readwrite.global.pre-defined.ruby,
    variable.other.readwrite.global.pre-defined.ruby punctuation
  settings: *variable

- name: "[Ruby] Variable: punctuation"
  scope: punctuation.definition.variable.ruby
  settings: *variable

- name: "[Ruby] Variable: separator punctuation"
  scope: punctuation.separator.variable.ruby
  settings: *punctuation

# -----------------------------------------------------------------------------
# Shell
# -----------------------------------------------------------------------------

- name: "[Shell] loop"
  scope: meta.scope.for-in-loop.shell, 
    variable.other.loop.shell
  settings: *plain

- name: "[Shell] 'case' block"
  scope: meta.scope.case-block.shell, 
    meta.scope.case-body.shell
  settings: *meta

- name: "[Shell] [[ ... ]]"
  scope: punctuation.definition.logical-expression.shell
  settings:
    foreground: *red

- name: "[Shell] Variable"
  scope: variable.other.normal.shell, 
    variable.other.positional.shell, 
    variable.other.bracket.shell,
    variable.other.special.shell, 
    variable.other.loop.shell, 
    variable.other.c-style.shell
  settings:
    foreground: *brred

- name: "[Shell] Command: privileged"
  scope: support.function.privilege.shell
  settings: 
    foreground: *yellow

- name: "[Shell] Command: built-in"
  scope: support.function.builtin.shell
  settings: *keyword

- name: "[Shell] Command: external"
  scope: support.function.external.shell
  settings: *plain

- name: "[Shell] Command switch"
  scope: support.command-switch.shell
  settings:
    <<: *keyword
    fontStyle: italic

- name: "[Shell] Punctuation: in 'case'"
  scope: punctuation.separator.pipe-sign.shell, 
    punctuation.definition.case-pattern.shell,
    punctuation.terminator.case-clause.shell
  settings: *sh_hardware

- name: "[Shell] Punctuation: quotes"
  scope: string.quoted.single.shell punctuation.definition.string.begin.shell,
    string.quoted.single.shell punctuation.definition.string.end.shell,
    string.quoted.double.shell punctuation.definition.string.begin.shell,
    string.quoted.double.shell punctuation.definition.string.end.shell,
    string.quoted.single.dollar.shell punctuation.definition.string.begin.shell,
    string.quoted.single.dollar.shell punctuation.definition.string.end.shell
  settings: *sh_hardware

- name: "[Shell] Punctuation: command/process substitution"
  scope: string.interpolated.dollar.shell punctuation.definition.string.begin.shell,
    string.interpolated.dollar.shell punctuation.definition.string.end.shell
  settings: *sh_hardware

- name: "[Shell] Command/process substitution"
  scope: string.interpolated.dollar.shell, 
    string.interpolated.backtick.shell, 
    string.interpolated.process-substitution.shell
  settings: *meta

- name: "[Shell] Function definition"
  scope: entity.name.function.shell, 
    punctuation.definition.arguments.shell
  settings:
    foreground: *blue

- name: "[Shell] Operator: redirection"
  scope: keyword.operator.redirect.shell
  settings: *sh_hardware

# -----------------------------------------------------------------------------
# JSON
# -----------------------------------------------------------------------------

- name: "[JSON] Numeric"
  scope: constant.numeric.json
  settings:
    foreground: *brred

# -----------------------------------------------------------------------------

semanticClass: theme.dark.thirty2k
uuid: D82D99D4-2566-43AE-8C8A-A4D59784C986
license: |
  Copyright © 2017 Z. Grace Moreau.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
...
