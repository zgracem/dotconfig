require "English"
require "irb/completion"
require "open-uri"
require "pp"
require "what_methods"  # object.what?(result)
                        # => method(s) that will produce result
require "zgm/colour"
require "zgm/object/blank"
require "zgm/proxy"
require "zgm/red_warnings"
# require "zgm/term"

include IRB

# -----------------------------------------------------------------------------
# http://irb.tools/
# -----------------------------------------------------------------------------

irb_version  = IRB.version.split(/[ (]/)[1]
ruby_version = RUBY_DESCRIPTION.split(/[ (]/)[1]

msg = "Welcome to %<i>sIRB %<i_v>s#{irb_version}%<x>s. " <<
      "You are using %<r>sruby %<r_v>s#{ruby_version}%<x>s."

colours = {
  i:   "#{Colour.cyan}",
  i_v: "#{Colour.brightcyan}",
  r:   "#{Colour.magenta}",
  r_v: "#{Colour.brightmagenta}",
  x:   "#{Colour.reset}"
}

# `configure.rb` loads `implementation.rb`, which sets up the Irbtools module 
# with a default welcome message. 
require "irbtools/configure"

# This overrides that default:
Irbtools.welcome_message = sprintf(msg, colours)

# Now we load the rest of it:
require "irbtools"

# -----------------------------------------------------------------------------
# settings
# -----------------------------------------------------------------------------

# General IRB settings

IRB.conf[:AUTO_INDENT]  = true

IRB.conf[:USE_READLINE] = true

IRB.conf[:HISTORY_FILE] = File::expand_path("~/.local/history/irb_history")
IRB.conf[:EVAL_HISTORY] = 2 ** 10
IRB.conf[:SAVE_HISTORY] = 2 ** 15

# -----------------------------------------------------------------------------
# prompt
# -----------------------------------------------------------------------------

off = "#{Colour.reset}"
dim = "#{Colour.brightblack}"

IRB.conf[:PROMPT][:ZGM] = {
  # normal prompt
  :PROMPT_I => "#{Colour.blue}>>#{off} ",

  # prompt when indenting code
  :PROMPT_N => "#{dim}>" + "#{Colour.blue}>  " + off,

  # prompt for continuing strings
  :PROMPT_S => "#{dim}%l" + "#{Colour.cyan}> " + off,

  # prompt for continuing statement
  :PROMPT_C => "#{dim}*" + "#{Colour.yellow}> " + off,

  # prefix to statement output
  :RETURN =>   "#{Colour.brightwhite}=>#{off} %s\n"
}

IRB.conf[:PROMPT_MODE] = :ZGM

# -----------------------------------------------------------------------------
# helper methods
# -----------------------------------------------------------------------------

def echo
  IRB.conf[:echo] = !IRB.conf[:echo]
end
